package day04;

public class StringTest1 {
	public static void main(String[] args) {
//		클래스로 만드는 모든 객체(변수)는 주소를 기억하는 참조형 변수이다
//		문자열이 최초로 만들어지면 메모리 어딘가에 문자열이 생성되고 문자열이 생성된 주소값이 변수에 저장된다
		
		String str1 = "AAA"; // str1에는 "AAA"가 생성된 메모리의 주소가 저장된다
//		메모리에 같은 내용의 문자열이 있으면, 굳이 다시 만들지 않고 기존에 있는 문자열의 주소값이 변수에 저장된다
		String str2 = "AAA"; // str2에는 str1에 저장된 "AAA"가 생성된 메모리의 주소가 저장된다
		
//		관계 연산자 : 연산 결과는 true(참), false(거짓) 둘 중의 하나이다
//		>, >=, <, <=, ==, != (자바에는 자동 형 변환이 없기 때문에 ===는 존재하지 않는다)
//		==를 사용해서 같은지 비교할 수 있는 데이터는 기본 자료형과 NULL(아무것도 없는 상태)만 가능하다
//		String은 클래스이므로 ==으로 비교하기에는 오류가 있을 수 있다
//		그러므로 String은 equals() 메소드를 사용하여 비교하는 것이 맞다
		
//		논리 연산자
//		&& : 논리곱, AND, 두 조건이 모두 참일 경우에만 참.
//		|| : 논리합, OR, 두 조건 중에서 한 개만 참이더라도 참
//		! : 논리부정, NOT

//		if(조건식) {
//			조건식이 참일 경우 실행할 문장
//		} else {
//			조건식이 거짓일 경우 실행할 문장
//		}
		
//		==을 사용해서 비교했으므로 변수에 저장된 문자열 자체를 비교한 게 아니고, 변수에 저장된 주소를 비교하게 된다.
//		즉, 같은 객체인지만 확인하게 되므로 문자열 자체 비교를 할 수 없게 된다.
		if (str1 == str2) {
			System.out.println("true");
		} else {
			System.out.println("false");
		}
		
		// new라는 예약어를 사용해서 객체를 생성하게 되면, 메모리에 같은 내용이 있는지와 상관없이 무조건 다시 만들게 된다 (새 객체 및 주소를)
		String str3 = new String("AAA"); // 이렇게 쓰는 게 원래인데, 보통 줄여서 씀
//		String str3 = "AAA";
		
		// 그러므로 str1과 str3을 비교하게 되면 false가 나온다 (객체의 주소가 다르기 때문에)
		if (str1.equals(str3)) {
			System.out.println("true");
		} else {
			System.out.println("false");
		}

//		한 마디로 정리하면 ==는 기본 자료형끼리 비교하면 값으로 비교하고, 객체끼리 비교하면 참조값(주소)를 비교한다
	}
}