package ex2_ValueType;

public class Ex1_ValueType {
	public static void main(String[] args) {
		
//		두 글자 이상이면 문자열임
//		100, 314, “A”, “Apple”과 같은 것들을 데이터라고 한다
//		우리가 프로그래밍 언어로 데이터를 다루기 위해서는 자료형을 정해주어야 한다
//		(프로그래밍 언어가 자료형에 따라 데이터를 다루는 방법이 다르기 때문)
		
//		자료형에는 여러가지가 있음
//		논리형 : boolean - 1byte
//		정수형 : 여러 가지가 있음 (short, int, long)
//		short : 2바이트, -32768 ~ 32767 사이의 정수를 기억
//		int : 4바이트, -21억 ~ 21억 사이의 정수를 기억
//		long : 8바이트 : -2의 63승 ~ 2의 63승 - 1 사이의 정수를 기억 (대략 -900경 ~ 900경)
//		실수형 : 두 가지가 있음 (float, double)
//		float : 4바이트, 단정도 실수, 소수점 아래 7자리 정도를 기억
//		double : 8바이트, 배정도 실수, 소수점 아래로 15자리 정도를 기억. 일반적으로 실수는 double을 사용함
//		문자형 : 한 글자만 다룸 (한 글자 넘으면 무조건 문자열)
//		char : 2바이트
		
//		내가 다룰 데이터와 자료형을 반드시 맞춰줘야 함
		
//		데이터를 저장해두는 일종의 그릇 : 변수
		
//		변수를 사용하는 과정
//		1. 변수의 선언 및 대입
//		2. 변수의 초기화
		
//		변수 선언 -> 비어있는 그릇을 만듦
//		자료형 변수명;
//		int num;
//		이제 대입하거나 초기화해야 함. 이 때 자료형에 맞는 데이터만 넣을 수 있음
		
//		대입 -> 만들어진 그릇에 물을 넣는 것
//		변수명 = 데이터; (우변의 값을 좌변의 변수에 대입한다)
		
//		변수의 초기화 -> 그릇을 만듦과 동시에 음료를 채우는 것
//		변수를 만들게 되면 해당 값은 비어있기 때문에 초기값을 세팅해주어야 함
//		자료형 변수명 = 데이터; -> 선언 + 대입
		
//		변수명 명명규칙
//		1. 첫글자에 숫자를 쓸 수 없다.
//		2. _와 $를 제외하고 특수문자는 쓸 수 없다.
//		3. 예약어는 쓸 수 없다 (if, for, switch 등)
//		4. 한글은 당연히 안 된다
//		5. (권장) 첫글자에 대문자는 적지 않는다.
//		6. (권장) 의미있는 단어로 짓는다. (그 변수의 역할 등)
		
		// 2일차 시작
		
		// 논리형 (boolean형)
		// true, false 뿐
		
//		boolean b1 = false;
//		
//		System.out.println(b1);
//		
//		System.out.println("b1의 값 : " + b1);
//		
//		boolean b3 = 1; // 변수의 자료형, 데이터의 자료형이 일치해야 함
		
//		문자형 데이터(char)는 ' ' 안에만 들어가고 무조건 한 글자만 들어간다 (2바이트)
		
//		char ch = '1';
		// 숫자를 넣으면 자동으로 해당하는 아스키코드값의 문자로 변환해서 저장함
//		char ch2 = 65;
//		
//		System.out.println("ch의 값 : " + (ch - '0'));
//		System.out.println("ch2의 값  : " + ch2);
//		
//		byte b = 128; // 자료형이 담을 수 있는 크기를 벗어남
//		byte b = 127;
//		short s = 32767;
//		
//		System.out.printf("b의 값 : %d\n", b);
//		System.out.printf("s의 값 : %d\n", s);
//		
		// 실수형 (부동소숫점이 있는 숫자)
//		float f = 3.14; // 이렇게만 적으면 오류 남 (실수에 대한 기본 자료형이 double임)
//		float f = 3.14f; // 굳이  float를 사용하려면 숫자 뒤에 f 붙이면 됨
		// 컴퓨터에서 부동소수점을 사용하는 이유는, 고정소수점은 정밀도가 낮고, 너무 큰 값이나 너무 작은 값의 처리가 어렵다.
		
//		double d = 1.23;
		
//		System.out.printf("f의 값 : %f\n", f);
//		System.out.printf("d의 값 : %f\n", d);
		
		double d = 100.5; // 8byte
		int n = 200; // 4byte
		
		d = n; // double에 int형 데이터를 넣으면 자동으로 더 큰 자료형인 double로 형변환됨
		
		System.out.println("d의 값 : " + d);
		
		char c = 'A'; // 2byte
		long l = 100; // 8byte
		
//		l = c;
		
		System.out.println("l의 값 : " + l);
		
		// 큰 값을 작은 자료형에 넣으려고 하면 오류가 남
		
		
	}
}
